//The model of the environment
mdp

//Environment global variables and parameters
const double pnobs;
const double pobs;
const int dist ;//maximum distance covered by the environment
const int up; //upper bound of expansion of the environment
//global d:[0..100] init 0; //global distance

//local system global variables and parameters
const double p1;
const double p2;
const double p3;
const double p4;
//const int dist1;//lower bound of danger
//const int dist2;//upper bound of danger
//const int obs1;

module Env
        obs:[0..up] init 0;//1=no obstacle, 2=obstacle, 3=partial obstacle
	d:[0..100] init 0; //global distance
	[]obs=0->pnobs:(obs'=obs+1)+pobs:(obs'=obs+2)+1-pnobs-pobs:(obs'=obs+3);
	[]obs>0&obs*3+3<up&d<dist-5 ->pnobs:(obs'=(obs*3)+1)&(d'=d+5)+pobs:(obs'=(obs*3)+2)&(d'=d+5)+1-pnobs-pobs:(obs'=(obs*3)+3)&(d'=d+5);
endmodule


module Monitor 
	x:[0..2] init 0;//0=monitor, 1=detect, 2=update
	[] x=0 -> p1:(x'=0)+1-p1:(x'=1);
	[] x=1 -> p2:(x'=1)+p3:(x'=0)+1-p2-p3:(x'=2);
	[] x=2 -> (x'=0);
endmodule


module Caterpillar 
	y:[0..2] init 0;//0=standby, 1=handle, 2=remove
	[] y=0 &(z!=2)-> (y'=0);
	[] y=0 &(z=2)-> (y'=1);
	[] y=1 -> p4:(y'=0)+1-p4:(y'=2);
	[] y=2 -> (y'=0);
endmodule

module Leader 
	z:[0..3] init 0;//0=stop, 1=run, 2=e-stop, 3=reduce speed
	[] z=0&(mod(obs,3)=2) -> (z'=0);
	[] z=0&(mod(obs,3)=1|mod(obs,3)=0) -> (z'=1);
	[estop1] z=1&(mod(obs,3)=2)-> (z'=2);
	[rspeed1] z=1&(mod(obs,3)=0) -> (z'=3);
	[] z=1&(mod(obs,3)=1) -> (z'=1);
	[] z=1&d=dist -> (z'=0);
	[] z=2&(y=0) -> (z'=1);
	[estop3] z=2&mod(obs,3)=2 -> (z'=2);
	[estop2] z=3&mod(obs,3)=2-> (z'=2);
	[rspeed2] z=3&mod(obs,3)=0 -> (z'=3);
	[] z=3&(mod(obs,3)=1)-> (z'=1);
	[] z=3&d=dist -> (z'=0);
endmodule

rewards "emergency_stop1"
	[estop1]    true : 1;
	[estop2]   true : 1;
endrewards

rewards "reduce_speed1"
	[rspeed1]  true : 1;
	[rspeed2] true : 1;
endrewards
rewards "general"
	true : 1;
endrewards

formula f1=mod(obs,3);


label "no_obstacle" = (f1=1);
label "obstacle" = (f1=2);
label "partial_obstacle" = (f1=0);
label "emergency_stop" = (z=2);
label "reduce_speed" = (z=3);
label "stop" = (z=0);
